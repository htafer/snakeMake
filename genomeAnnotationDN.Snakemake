#run snakemake
#
#snakemake -d `pwd` -s `pwd`/genomeAnnotationDN.Snakemake --stats snakemake.stats -j 100 --cluster 'qsub {params.cluster}'

#################################
#                               #
#     Import modules            #
#                               #
#################################

import math
import os

#################################
#                               #
#      Own function definition  #
#                               #
#################################



def getFileNumber(file_name, entryNumber):
      f = open(file_name)
      total = 0
      for line in f:
          if ">" in line:
              total += 1
      f.close()
      return math.floor(2*total/entryNumber+1);    


#get bam file
def getBamFile(dir,species):
      list=[];
      for file in os.listdir(dir+'/'+species+'.reads/.'):
            if fnmatch.fnmatch(file,'*.*.bam'):
                  list.append(file);
      return list

#uniquify ids
def f10(seq, idfun=None):
    seen = set()
    results=[]
    if idfun is None:
        for x in seq:
            if x in seen:
                continue
            seen.add(x)
            results.append(x)
    else:
        for x in seq:
            x = idfun(x)
            if x in seen:
                continue
            seen.add(x)
            results.append(x)
    return results



#################################
#                               #
#      Variables setup          #
#                               #
#################################

    #################################                
    #Environment                    #
    #################################

HOME=os.environ['HOME']
WORKDIR=HOME+"/genomeAnnotationDN2"
COMPUTEDIR="/scratch"
HMM="./HMM"

    #################################
    #THREADS                        #
    #################################

THREADS=16

    ##################################
    #FILES                           #
    ##################################

#GENOME
GENOME=WORKDIR+"/{genome}.fasta"
GENOMES,=glob_wildcards(GENOME);


UNIREF=WORKDIR+"/protein/eurotiomycetesUniref90.clean.fa"

#CEGMAKOGS
CEGMAKOGS=HOME+"/bin/CEGMA_v2/data/kogs.fa"

#EVMWEIGHT
EVMWEIGHT=WORKDIR+"/weightFile.cfg"

CM=HOME+"/data/Rfam.cm"

    ##################################
    #BIOLOGY                         #
    ##################################

#BIOLOGY
INTRON=2000

    ##################################
    #Annotation Type                 #
    ##################################

ANNOTATION="allEvm2 Rfam tRNAscan RNAmmer".split();

print(ANNOTATION)
     

#Which rules are run locally # depends on which computer the pipeline is running
#localrules: all, clean, geneMarkEs, cegma, scipio, cufflinks, cuffmerge, segemehl, segemehlIdx, bamToFastq, composeMerge, mergeAssemblies, trinityAlignment, trinityDeNovo,PASA, snapFirstPass, augustusFirstPass,prepareGFFForEVM,EVMFirstPass,snapSecondPass,augustusSecondPass,EVMSecondPass,prepareGFFForEVM2

localrules: all, clean, prepareGFFForEVM, prepareGFFForEVM2

rule all:
     input: expand("./gff/{genome}.{annotation}.gff", genome=GENOMES,annotation=ANNOTATION)




##################################
##                               #
##      tRNAscan-SE              #
##                               #
##################################

rule tRNAscanSE:
     input: "{genome}.fasta"
     output: gff="./gff/"+"{genome}.tRNAscan.gff", stat="./tRNAStat/"+"{genome}.tRNAscanSE.stat"
     threads: THREADS
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}} 
     cd {COMPUTEDIR}/${{prefix}}
     mkdir -p {WORKDIR}/tRNAStat
     tRNAscan-SE  -o tRNAscanSE.out -m {WORKDIR}/{output.stat}  {WORKDIR}/{input} 
     tRNAscan2gff.pl < tRNAscanSE.out > {WORKDIR}/{output.gff}
     rm -rf {COMPUTEDIR}/${{prefix}}
     """

##################################   
##                               #
##      Rfam                     #
##                               #  
################################## 

rule Rfam:
     input: "{genome}.fasta"
     output: gff="./gff/{genome}.Rfam.gff"
     threads: THREADS
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"
     shell: """
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     cmsearch --tblout bla {CM} {WORKDIR}/{input}
     Rfam2gff.pl < bla > {WORKDIR}/{output.gff}
     rm -rf {COMPUTEDIR}/${{prefix}}
"""



##################################
##                               #
##      RNAmmer                  #                                           
##                               #
##################################

rule RNAmmer:
     input: "{genome}.fasta"
     output: "./gff/"+"{genome}.RNAmmer.gff"
     threads: THREADS
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"
     shell: """
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     rnammer -S euk -m lsu,ssu,tsu -gff temp  < {WORKDIR}/{input} 
     cat temp | grep -v "#" > {WORKDIR}/{output}
     rm -rf {COMPUTEDIR}/{{$prefix}}
"""




#################################################################################
#                                                                               #
#                            EVM SECOND PASS                                    #
#                                                                               #
#################################################################################



rule EVMSecondPass:
     input: evm="./gff/{genome}.evm2.gff", scipio="./gff/{genome}.scipio.evm.gff", genome="{genome}.fasta"
     output: "./gff/{genome}.allEvm2.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     partition_EVM_inputs.pl --genome {WORKDIR}/{input.genome} --protein_alignments {WORKDIR}/{input.scipio}  --min_intron_length 10 --partition_listing partitions_list.out --gene_predictions {WORKDIR}/{input.evm} --segmentSize 1000000 --overlapSize 20000
     write_EVM_commands.pl --genome {WORKDIR}/{input.genome} --weights {EVMWEIGHT} --gene_predictions {WORKDIR}/{input.evm} --protein_alignments {WORKDIR}/{input.scipio} --output_file evm.out --partitions partitions_list.out  > commands.list
     cat commands.list | parallel -j {threads} \"echo {{}} | bash\"
     recombine_EVM_partial_outputs.pl --partitions partitions_list.out --output_file_name evm.out
     convert_EVM_outputs_to_GFF3.pl  --partitions partitions_list.out --output evm.out --genome {WORKDIR}/{input.genome}
     cat `find . -name \*.out.gff3` > {WORKDIR}/{output}
     """

rule prepareGFFForEVM2:
     input: snap="./gff/{genome}.snap2.gff", augustus="./gff/{genome}.augustus2.gff",gm="./gff/{genome}.genemark.evm.gff",glimmer="./gff/{genome}.glimmer2.gff"
     output: snap="./gff/{genome}.snap2.evm.gff", augustus="./gff/{genome}.augustus2.evm.gff", evmInput="./gff/{genome}.evm2.gff",glimmer="./gff/{genome}.glimmer2.evm.gff"
     shell:"""
     SNAP_to_GFF3.pl {input.snap} > {output.snap}
     augustus_to_GFF3.pl {input.augustus} > {output.augustus}
     glimmerHMM_to_GFF3.pl  {input.glimmer} > {output.glimmer}
     cat {output.snap} {output.augustus} {output.glimmer} {input.gm} > {output.evmInput}
     """


#################################################################################
#                                                                               #
#                            SNAP AND AUGUSTUS RETRAINING                       #
#                                                                               #
#################################################################################


rule augustusSecondPass:
     input: evm="./gff/{genome}.allEvm.gff", genome="{genome}.fasta", scipio="./gff/{genome}.scipio.gff"
     output: gff="./gff/{genome}.augustus2.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     #Training
     gff2gbSmallDNA.pl {WORKDIR}/{input.evm} {WORKDIR}/{input.genome} 10 test.gb
     randomSplit.pl test.gb 100
     optimize_augustus.pl --species={wildcards.genome} test.gb.train --cpus={threads} --UTR=off 
     etraining --species={wildcards.genome} test.gb.train
     scipio2hints.pl --in={WORKDIR}/{input.scipio} --out=/dev/stdout > ./scipio.hints.gff 
     augustus --gff3=on --species={wildcards.genome} --hintsfile=./scipio.hints.gff --UTR=off {WORKDIR}/{input.genome}  --extrinsicCfgFile=${{AUGUSTUS_CONFIG_PATH}}/extrinsic/extrinsic.MP.cfg > {WORKDIR}/{output.gff}
     """



rule snapSecondPass:
     input: evm="./gff/{genome}.allEvm.gff", genome="{genome}.fasta"
     output: model="./HMM/{genome}.snap2.hmm", gff="./gff/{genome}.snap2.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     evm2zff  {WORKDIR}/{input.evm} > test.ann
     grep '^>' test.ann | tr -d '>' > test.seqs2keep
     fasta_sort.pl test.seqs2keep < {WORKDIR}/{input.genome} > test.dna
     fathom test.ann test.dna -gene-stats > gene-stats.log 
     fathom test.ann test.dna -validate > validate.log 
     fathom test.ann test.dna -categorize 1000 > categorize.log 
     fathom uni.ann uni.dna -export 1000 -plus > uni-plus.log 
     forge export.ann export.dna
     hmm-assembler.pl {WORKDIR}/{input.genome} . > {WORKDIR}/{output.model}
     snap {WORKDIR}/{output.model} {WORKDIR}/{input.genome} | zff2gff3.pl > {WORKDIR}/{output.gff}
     rm -rf {COMPUTEDIR}/${{prefix}}
     """


rule glimmerSecondPass:
     input: genome="{genome}.fasta", model="./{genome}.glimmer2"
     output: gff="./gff/{genome}.glimmer2.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     glimmhmm.pl glimmerhmm_linux_x86_64 {WORKDIR}/{input.genome} {WORKDIR}/{input.model} -g > {WORKDIR}/{output.gff}
     """

rule glimmerSecondPassTrain:
     input: genome="{genome}.fasta", evm="./gff/{genome}.allEvm.gff"
     output: model="./{genome}.glimmer2"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     evm2Glimmer.pl < {WORKDIR}/{input.evm} > train.glimmer
     trainGlimmerHMM {WORKDIR}/{input.genome} train.glimmer -d {WORKDIR}/{output.model} -f 90 -l 140
     rm -rf {COMPUTEDIR}/${{prefix}}
     """

#################################################################################
#                                                                               #
#                            EVM FIRST PASS                                     #
#                                                                               #
#################################################################################


rule EVMFirstPass:
     input: evm="./gff/{genome}.evm.gff", scipio="./gff/{genome}.scipio.evm.gff", genome="{genome}.fasta"
     output: "./gff/{genome}.allEvm.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     partition_EVM_inputs.pl --genome {WORKDIR}/{input.genome} --protein_alignments {WORKDIR}/{input.scipio}  --min_intron_length 10 --partition_listing partitions_list.out --gene_predictions {WORKDIR}/{input.evm} --segmentSize 1000000 --overlapSize 20000
     write_EVM_commands.pl --genome {WORKDIR}/{input.genome} --weights {EVMWEIGHT} --gene_predictions {WORKDIR}/{input.evm} --protein_alignments {WORKDIR}/{input.scipio} --output_file evm.out --partitions partitions_list.out  > commands.list
     cat commands.list | parallel -j {threads} \"echo {{}} | bash\"
     recombine_EVM_partial_outputs.pl --partitions partitions_list.out --output_file_name evm.out
     convert_EVM_outputs_to_GFF3.pl  --partitions partitions_list.out --output evm.out --genome {WORKDIR}/{input.genome}
     cat `find . -name \*.out.gff3` > {WORKDIR}/{output}
     """

rule prepareGFFForEVM:
     input: gm="./gff/{genome}.genemark.gff", snap="./gff/{genome}.snap.gff", augustus="./gff/{genome}.augustus.gff",scipio="./scipio/{genome}.yaml",glimmer="./gff/{genome}.glimmer.gff"
     output: gm="./gff/{genome}.genemark.evm.gff", snap="./gff/{genome}.snap.evm.gff", augustus="./gff/{genome}.augustus.evm.gff", scipio="./gff/{genome}.scipio.evm.gff", glimmer="./gff/{genome}.glimmer.evm.gff", evmInput="./gff/{genome}.evm.gff"
     shell:"""
     SNAP_to_GFF3.pl {input.snap} > {output.snap}
     augustus_to_GFF3.pl {input.augustus} > {output.augustus}
     genemark_gtf2gff3 {input.gm} > {output.gm}
     glimmerHMM_to_GFF3.pl {WORKDIR}/{input.glimmer} > {output.glimmer}
     yaml2gff.1.4.pl {input.scipio} | grep "ID=" | sed -r 's/;Mismat.+//g' | sed -r 's/protein_match/nucleotide_to_protein_match/' | sed -r 's/Scipio/{wildcards.genome}/' | sed -r 's/Query/Target/' | sed -r 's/ID=/ID={wildcards.genome}./' > {output.scipio}
     cat {output.gm} {output.snap} {output.augustus} {output.glimmer} > {output.evmInput}
     """

#################################################################################
#                                                                               #
#                            FIRST ABINITIO PREDICTION                          #
#                                                                               #
#################################################################################




##################################
##                               #
##      Glimmer                  #
##                               #
##################################



rule glimmerFirstPass:
     input: genome="./{genome}.fasta",model="./{genome}.glimmer"
     output: gff="./gff/{genome}.glimmer.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     glimmhmm.pl glimmerhmm_linux_x86_64 {WORKDIR}/{input.genome} {WORKDIR}/{input.model} -g > {WORKDIR}/{output.gff}
     """

rule glimmerFirstPassTrain:
     input: genome="./{genome}.fasta", cegma="./gff/{genome}.cegma.gff"
     output: model="./{genome}.glimmer"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     rm -rf {WORKDIR}/{output}
     mkdir -p {WORKDIR}/{output.model}
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     cegma2Glimmer.pl < {WORKDIR}/{input.cegma} > train.glimmer
     trainGlimmerHMM {WORKDIR}/{input.genome} train.glimmer -d {WORKDIR}/{output.model} -f 90 -l 140
     rm -rf {COMPUTEDIR}/${{prefix}}
     """

###################################
###                               #
###      Augustus                 #
###                               #
###################################
#
#Use the cegma output to train the models
#

rule augustusFirstPass:
     input: genome="{genome}.fasta", cegma="./gff/{genome}.cegma.gff", scipio="./gff/{genome}.scipio.gff"
     output: gff="./gff/{genome}.augustus.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     #Training
     cegma2gff.pl {WORKDIR}/{input.cegma} > augustus-training.gff
     gff2gbSmallDNA.pl augustus-training.gff {WORKDIR}/{input.genome} 10 test.gb
     randomSplit.pl test.gb 100
     new_species.pl --species={wildcards.genome}
     etraining --species={wildcards.genome} test.gb.train
     optimize_augustus.pl --species={wildcards.genome} test.gb.train --cpus={threads} --UTR=off 
     etraining --species={wildcards.genome} test.gb.train
     scipio2hints.pl --in={WORKDIR}/{input.scipio} --out=/dev/stdout > ./scipio.hints.gff 
     augustus --gff3=on --species={wildcards.genome} --hintsfile=./scipio.hints.gff --UTR=off {WORKDIR}/{input.genome}  --extrinsicCfgFile=${{AUGUSTUS_CONFIG_PATH}}/extrinsic/extrinsic.MP.cfg > {WORKDIR}/{output.gff}
     """


##################################
##                               #
##      SNAP                     #
##                               #
##################################
#
#Use the cegma output to train the models and make first round of predictions
#


rule snapFirstPass:
     input: genome="{genome}.fasta", cegma="./gff/{genome}.cegma.gff"
     output: model="./HMM/{genome}.snap.hmm", gff="./gff/{genome}.snap.gff"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     cegma2zff {WORKDIR}/{input.cegma} {WORKDIR}/{input.genome}
     fathom genome.ann genome.dna -categorize 1000
     fathom -export 1000 -plus uni.ann uni.dna
     forge export.ann export.dna
     mkdir -p {WORKDIR}/{HMM}
     hmm-assembler.pl {WORKDIR}/{input.genome} . > {WORKDIR}/{output.model}
     snap {WORKDIR}/{output.model} {WORKDIR}/{input.genome} | zff2gff3.pl > {WORKDIR}/{output.gff}
     rm -rf {COMPUTEDIR}/${{prefix}}
     """




     
#################################################################################
#                                                                               #
#                             EVIDENCE MAPPING                                  #
#                                                                               #
#################################################################################


#################################
#                               #
# Scipio Splice protein mapping #
#                               #
#################################
#
# Will be used with evidence modeler
#

rule scipio:
     input: "{genome}.fasta"
     output: gff="./gff/{genome}.scipio.gff", yaml="./scipio/{genome}.yaml"
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     threads: THREADS
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     mkdir -p {WORKDIR}
     cat {UNIREF} | parallel -j {threads} -N20 --round-robin --pipe --recstart ">" "cat /dev/stdin > {COMPUTEDIR}/${{prefix}}/{{#}}; scipio.1.4.1.pl --min_score=0.3 --min_identity=60 --min_coverage=60 --max_mismatch=100 --multiple_results --blat_score=15 --blat_tilesize=7 --max_assemble_size={INTRON} --blat_params=\"-oneOff=1\" --exhaust_align_size={INTRON} --exhaust_gap_size=30  --accepted_intron_penalty=1.0  --blat_output={COMPUTEDIR}/${{prefix}}/{{#}}.psl {WORKDIR}/{input} {COMPUTEDIR}/${{prefix}}/{{#}} --verbose > {COMPUTEDIR}/${{prefix}}/{{#}}.yaml ; yaml2gff.1.4.pl < {COMPUTEDIR}/${{prefix}}/{{#}}.yaml > {COMPUTEDIR}/${{prefix}}/{{#}}.yamlgff ; scipiogff2gff.pl --in={COMPUTEDIR}/${{prefix}}/{{#}}.yamlgff --out={COMPUTEDIR}/${{prefix}}/{{#}}.gff" 
     cat {COMPUTEDIR}/${{prefix}}/*.gff | sort -u | sort -k 1,1 -k 4,4g -k 5,5g > {WORKDIR}/{output.gff} 
     cat {COMPUTEDIR}/${{prefix}}/*.yaml > {WORKDIR}/{output.yaml}
     rm -rf {COMPUTEDIR}/{{$prefix}}
     """

##################################
##                               #
##     CEGMA CORE PROTEIN MAPPING#
##                               #
##################################
#This will be used to train SNAP and AUGUSTUS
#

rule cegma:
     input: "{genome}.fasta"
     output: "./gff/{genome}.cegma.gff"
     threads: THREADS
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     cegma -g {WORKDIR}/{input} --ext -v -T {threads}  --max_intron {INTRON}    -p {CEGMAKOGS}
     mv {COMPUTEDIR}/${{prefix}}/output.cegma.gff {WORKDIR}/{output}
     """


#################################################################################
#                                                                               #
#                             AB INITIO                                         #
#                                                                               #
#################################################################################




##################################
##                               #
##     Ab-initio                 #
##                               #
##################################
#
rule geneMarkEs:
     input: "{genome}.fasta"
     output: "./gff/{genome}.genemark.gff"
     threads: THREADS
     params: cluster="-cwd -V -l mem_free=8G -l h_vmem=8G"     
     shell:"""
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     mkdir -p {COMPUTEDIR}/${{prefix}}
     cd {COMPUTEDIR}/${{prefix}}
     gmes_petap.pl --fungus --ES --cores {threads} --sequence {WORKDIR}/{input} --min_contig 300
     cat genemark.gtf > {WORKDIR}/{output}
     """


rule clean:
     shell: "rm -rf tRNAStat tRNAstat HMM scipio gff"

##Masking
rule repeatMasker:
     input: "{genome}.fasta"
     output: "{genome}.fasta.masked"
     threads: THREADS
     params: cluster="-cwd -V"     
     shell:"""
            RepeatMasker -qq -pa {threads} -species fungi {WORKDIR}/{input}
           """

