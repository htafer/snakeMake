# =====================================
# genomeAssemblyProduction.Snakemake
# =====================================
#
# Purpose:
#   This Snakemake workflow performs genome assembly using MIRA assembler.
#   It maps reads to a reference genome and produces a de novo assembly.
#
# Workflow Steps:
#   1. Read mapping to reference genome
#   2. De novo assembly using MIRA
#
# Input Requirements:
#   - FASTQ files containing sequencing reads
#   - Reference genome in FASTA format
#
# Output Files:
#   - Assembled genome sequences (*.assembled.fasta)
#
# Dependencies:
#   - MIRA assembler
#   - SGE cluster environment (for qsub)
#
# Usage:
#   snakemake -s genomeAssemblyProduction.Snakemake \
#     --cluster 'qsub -l {params.cluster}' \
#     --stats snakemake.stats \
#     -j <jobs>
#
# Author: htafer
# Last Updated: 2025-07-28
#
# =====================================

# Configuration
configfile: "config.yaml"  # Optional: move parameters to config file

# Directory structure
WORKDIR = config.get("workdir", "/home/lv70539/htafer/mappedAssemblies")
COMPUTEDIR = config.get("computedir", "/scratch")
LOGDIR = "logs"

# Input files pattern
FILES = WORKDIR + "/{id}.fastq"
IDS, = glob_wildcards(FILES)

# Assembly parameters
TEMPLATE = config.get("template", "cTemplate1.fna")
STRAIN = config.get("strain", "chaethomium")
THREADS = config.get("threads", 64)
MEMORY = config.get("memory", "200G")
#Which rules are run locally
localrules: all

rule all:
     input: expand("{id}.assembled.fasta", id=IDS)


rule deNovoMira:
     input: "{id}.fastq","{id}.fna"
     output: "{id}.assembled.fasta"
     params: cluster="-cwd -V -l mem_free=200G -l h_vmem=200G -pe mpich 64 -q highmem.q"     
     shell: """
     prefix=`date --rfc-3339=ns  | md5sum | head -c 16`
     uname -a
     mkdir -p {COMPUTEDIR}/${{prefix}}mira/
     #Generate manifest
     echo "project = MyFirstAssembly" > {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "job = genome,mapping,accurate" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "readgroup" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "is_reference" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "data = {WORKDIR}/{input[1]}" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "strain = {STRAIN}" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "readgroup = assembly" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     seqType="fastq" #We have to specify the type of file
     echo "data = $seqType::{WORKDIR}/{input[0]}" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "technology = iontor" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     echo "parameters = -GENERAL:number_of_threads=64 -SK:number_of_threads=64 -NW:cmrnl=warn -NW:cac=warn" >> {COMPUTEDIR}/${{prefix}}mira/manifest
     cd  {COMPUTEDIR}/${{prefix}}mira/
     mira ./manifest
     mv {COMPUTEDIR}/${{prefix}}mira {WORKDIR}/{output}
     """     

rule clean:
     shell: "rm  *.sh.e* *.sh.o*"
