
# =====================================================================
# chimericRNA.Snakemake
# =====================================================================
#
# Purpose:
#   Detect and extract chimeric RNAs from STAR-mapped RNA-seq data.
#   Identifies both fusion transcripts and circular RNAs (circRNAs).
#
# Input Requirements:
#   - STAR chimeric junction files (from STAR RNA-seq alignment)
#   - Reference genome FASTA file
#   - Gene annotation in GTF format
#
# Outputs:
#   - Fusion transcripts (.fusion_candidates.final.abridged)
#   - Circular RNAs (.circular_candidates.final.abridged)
#   - Differential expression analysis results (fusionTrans.htC, fusionCircular.htC)
#
# Dependencies:
#   - STAR-Fusion
#   - BLAST+
#   - R (for differential expression analysis)
#   - Custom Perl scripts (getCircSpliceRNA.pl, parseSTARCirc.pl, etc.)
#
# Usage:
#   snakemake -d $(pwd) -s $(pwd)/chimericRNA.Snakemake \
#             --stats snakemake.stats \
#             -j 100 \
#             --cluster 'qsub {params.cluster}'
#
# Author: htafer
# Last Updated: 2025-07-28
# ====================================================================

# =============================================================================
# Imports and Configuration
# =============================================================================

import os
import math
from snakemake.utils import min_version

# Ensure minimum Snakemake version
min_version("6.0")

# =============================================================================
# Configuration
# =============================================================================

# Environment settings
HOME = os.environ['HOME']
WORKDIR = "/media/work/genomes/claImm/RNAseq/diffExp/chimericRNAs"
COMPUTEDIR = "/tmp"

# Computational resources
THREADS = 16

# File paths and settings
SPECIES = "claImm"
GENOME = os.path.join(WORKDIR, f"{SPECIES}.fasta")
ANNOTATION = os.path.join(WORKDIR, f"{SPECIES}.Protein.gtf")
CHIMERIC_JUNCTION = os.path.join(WORKDIR, "{condition}Chimeric.out.junction")

# Get list of conditions from junction files
JUNCTIONS, = glob_wildcards(CHIMERIC_JUNCTION)

# Biological parameters
MAX_INTRON_LENGTH = 2000  # Maximum intron length for circular RNA detection

# Define rules that should run locally
localrules: 
    all,
    refGen,
    mapping,
    blast,
    FusionStar,
    getDiffFusion,
    getCircular,
    getDiffCircular,
    getDiffFusion

# Target rule that defines the final outputs
rule all:
    input:
        fusion_diff="fusionTrans.htC",
        circular_diff="fusionCircular.htC",
        candidates=expand(
            "{condition}.{type}_candidates.final.abridged",
            condition=JUNCTIONS,
            type=["circular", "fusion"]
        )
    message:
        """
        ========================================================================
        Chimeric RNA Analysis Complete
        ========================================================================
        
        The analysis has generated the following files:
        1. Differential expression results:
           - Fusion transcripts: fusionTrans.htC
           - Circular RNAs: fusionCircular.htC
        
        2. Candidate files for each condition:
           - Fusion candidates: {condition}.fusion_candidates.final.abridged
           - Circular candidates: {condition}.circular_candidates.final.abridged
        
        To analyze specific transcripts:
        
        For fusion transcripts:
        cat {condition}.fusion_candidates.final.abridged | head -n 4 | \\
            ~/bin/getTransSpliceRNA.pl -a {input.gtf} -T STAR-Fusion -g {input.genome} -d 1 -s 1
        
        For circular RNAs:
        cat {condition}.circular_candidates.final.abridged | head -n 4 | \\
            ~/bin/getCircSpliceRNA.pl -a {input.gtf} -g {input.genome} -d 1 -s 1
        ========================================================================
        """






###  Get split read count and generate a differential expression


# =============================================================================
# Circular RNA Detection and Analysis
# =============================================================================

rule getCircular:
    """
    Detect circular RNA candidates from STAR chimeric junctions.
    
    This rule processes STAR chimeric junction output to identify potential
    circular RNAs based on read orientation and distance criteria.
    
    Input:
        annotation: Gene annotation in GTF format
        dna: Reference genome in FASTA format
        chimeric: STAR chimeric junction file for a condition
    
    Output:
        Filtered list of circular RNA candidates
    """
    input:
        annotation=ANNOTATION,
        dna=GENOME,
        chimeric="{condition}Chimeric.out.junction"
    output:
        "{condition}.circular_candidates.final.abridged"
    log:
        "logs/getCircular_{condition}.log"
    shell:
        """
        (cat {input.chimeric} | \
         getCircSpliceRNA.pl -a {input.annotation} -g {input.dna} | \
         sort -k 21,21gr | \
         perl -lane 'if($F[21] eq $F[25] && abs($F[1]-$F[4]) <= {MAX_INTRON_LENGTH}){{print;}}' \
         > {output}) 2> {log}
        """

rule getDiffCircular:
    """
    Perform differential expression analysis of circular RNAs.
    
    This rule combines circular RNA candidates from all conditions and
    performs differential expression analysis using custom scripts.
    
    Input:
        Circular RNA candidate files from all conditions
    
    Output:
        Differential expression results for circular RNAs
    """
    input:
        expand("{condition}.circular_candidates.final.abridged", condition=JUNCTIONS)
    output:
        matrix="fusionCircular.htC"
    log:
        "logs/getDiffCircular.log"
    params:
        min_count=1  # Minimum count threshold for analysis
    shell:
        """
        (j=$(echo "{input}" | sed -r 's/ +/,/g')
        parseSTARCirc.pl -d . -m {params.min_count} -f ${{j}} > {output.matrix}
        Rscript diffCircular.R) 2> {log}
        """



# =============================================================================
# Fusion Transcript Detection and Analysis
# =============================================================================

rule FusionStar:
    """
    Detect fusion transcripts using STAR-Fusion.
    
    This rule processes STAR chimeric junction output to identify potential
    fusion transcripts using the STAR-Fusion algorithm.
    
    Input:
        annotation: Gene annotation in GTF format
        cdna: Transcriptome FASTA file
        chimeric: STAR chimeric junction file for a condition
    
    Output:
        List of fusion transcript candidates
    """
    input:
        annotation=ANNOTATION,
        cdna="my_cdna.fasta",
        chimeric="{condition}Chimeric.out.junction"
    output:
        fusion="{condition}.fusion_candidates.final.abridged"
    log:
        "logs/FusionStar_{condition}.log"
    params:
        outdir="{condition}",
        star_fusion=os.path.expanduser("~/bin/STARdir/STAR-Fusion/STAR-Fusion")
    shell:
        """
        {params.star_fusion} \
            --out_prefix {wildcards.condition} \
            --genome_lib_dir . \
            --chimeric_junction {input.chimeric} \
            --output-dir {params.outdir} \
            2> {log}
        """

rule getDiffFusion:
    """
    Perform differential expression analysis of fusion transcripts.
    
    This rule combines fusion transcript candidates from all conditions
    and performs differential expression analysis.
    
    Input:
        Fusion transcript candidate files from all conditions
    
    Output:
        Differential expression results for fusion transcripts
    """
    input:
        expand("{condition}.fusion_candidates.final.abridged", condition=JUNCTIONS)
    output:
        matrix="fusionTrans.htC"
    log:
        "logs/getDiffFusion.log"
    params:
        min_count=1  # Minimum count threshold for analysis
    shell:
        """
        (j=$(echo "{input}" | sed -r 's/ +/,/g')
        parseSTARFusion.pl -d . -m {params.min_count} -f ${{j}} > {output.matrix}
        Rscript diffFusion.R) 2> {log}
        """

# =============================================================================
# Genome Library Preparation
# =============================================================================

rule cdnaPreparation:
    """
    Extract cDNA sequences from genome and annotation.
    
    This rule generates a transcriptome FASTA file from the genome and
    annotation files, then indexes it for STAR-Fusion.
    
    Input:
        genome: Reference genome FASTA
        annotation: Gene annotation GTF
    
    Output:
        fasta: Transcriptome FASTA file
        idx: Index of transcriptome sequences
    """
    input:
        genome=GENOME,
        annotation=ANNOTATION
    output:
        fasta="my_cdna.fasta",
        idx="my_cdna.fasta.idx"
    log:
        "logs/cdnaPreparation.log"
    params:
        star_fusion_utils=os.path.expanduser("~/bin/STARdir/STAR-Fusion/util")
    shell:
        """
        (set -e
        {params.star_fusion_utils}/gtf_file_to_cDNA_seqs.pl \
            {input.annotation} {input.genome} > {output.fasta}
        
        {params.star_fusion_utils}/index_cdna_seqs.pl {output.fasta}) 2> {log}
        """

rule blast:
    """
    Perform BLAST search for gene pairs.
    
    This rule creates a BLAST database from the cDNA sequences and performs
    a self-BLAST to identify potential gene pairs for fusion detection.
    
    Input:
        cdna: Transcriptome FASTA file
    
    Output:
        Compressed BLAST results of gene pairs
    """
    input:
        cdna="my_cdna.fasta"
    output:
        blast_pairs="my_cdna.fasta.blastn_gene_pairs.gz"
    threads: THREADS
    log:
        "logs/blast.log"
    params:
        evalue=0.001,
        word_size=11,
        gapopen=2,
        gapextend=1,
        blast_db="my_cdna.fasta.BLAST"
    shell:
        """
        (set -e
        # Prepare sequence headers for BLAST
        cat {input.cdna} | perl -lane 'if($F[0]=~/>/){{my $head=join("::",@F); print $head;}}else{{print;}}' > {params.blast_db}
        
        # Create BLAST database
        makeblastdb -in {params.blast_db} -dbtype nucl
        
        # Perform BLAST search
        blastn -db {params.blast_db} \
               -query {params.blast_db} \
               -evalue {params.evalue} \
               -outfmt 6 \
               -lcase_masking \
               -num_threads {threads} \
               -word_size {params.word_size} \
               -gapopen {params.gapopen} \
               -gapextend {params.gapextend} \
               > my_cdna.fasta.blastn_gene_pairs
        
        # Compress results
        gzip my_cdna.fasta.blastn_gene_pairs) 2> {log}
        """

rule prepGenLib:
    """
    Prepare genome library for STAR-Fusion.
    
    This rule prepares the genome library required by STAR-Fusion,
    including processing the genome, annotation, and BLAST results.
    
    Input:
        blast_pairs: Compressed BLAST results
        cdna: Transcriptome FASTA file
    
    Output:
        Flag file indicating successful preparation
    """
    input:
        blast_pairs="my_cdna.fasta.blastn_gene_pairs.gz",
        cdna="my_cdna.fasta"
    output:
        touch("ref_genome.fa.star.idx.ok")
    threads: THREADS
    log:
        "logs/prepGenLib.log"
    params:
        prep_script=os.path.expanduser("~/bin/STARdir/STAR-Fusion/FusionFilter/prep_genome_lib.pl")
    shell:
        """
        {params.prep_script} \
            --genome_fa {GENOME} \
            --gtf {ANNOTATION} \
            --blast_pairs {input.blast_pairs} \
            --cdna_fa {input.cdna} \
            2> {log}
        """





# =============================================================================
# RNA-seq Read Mapping
# =============================================================================

# Note: This mapping rule is currently disabled but kept for reference.
# Uncomment and adjust as needed for your RNA-seq analysis pipeline.

"""
rule mapping:
    '''
    Map RNA-seq reads using STAR aligner.
    
    This rule performs RNA-seq read alignment using STAR, configured specifically
    for chimeric read detection (fusion and circular RNA discovery).
    
    Input:
        genome: Reference genome FASTA
        read: FASTQ file with RNA-seq reads
        index: Genome index file
    
    Output:
        Chimeric junction file for downstream analysis
    
    Parameters:
        threads: Number of CPU threads to use
        min_intron: Minimum intron length (15 bp)
        max_intron: Maximum intron length (from config)
        chim_segment: Minimum chimeric segment length (12 bp)
        chim_overhang: Minimum chimeric junction overhang (12 bp)
        splice_overhang: Minimum splice junction overhang (10 bp)
    '''
    input:
        genome=GENOME,
        read="{condition}.fastq",
        index=GENOME + ".fai"
    output:
        chimeric="{condition}Chimeric.out.junction",
        bam="{condition}Aligned.sortedByCoord.out.bam"
    threads: THREADS
    log:
        "logs/star_mapping_{condition}.log"
    params:
        out_prefix="{condition}",
        min_intron=15,
        chim_segment=12,
        chim_overhang=12,
        splice_overhang=10
    shell:
        """
        STAR --runThreadN {threads} \
             --genomeDir . \
             --readFilesIn {input.read} \
             --outFileNamePrefix {params.out_prefix} \
             --alignIntronMin {params.min_intron} \
             --alignIntronMax {MAX_INTRON_LENGTH} \
             --outFilterIntronMotifs RemoveNoncanonicalUnannotated \
             --chimSegmentMin {params.chim_segment} \
             --chimJunctionOverhangMin {params.chim_overhang} \
             --alignSJDBoverhangMin {params.splice_overhang} \
             --outSAMtype BAM SortedByCoordinate \
             2> {log}
        """
"""
